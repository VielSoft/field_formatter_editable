<?php

/**
 * @file
 * Provide for custom classes on field formatters in the display.
 */

/**
 * Implements hook_menu().
 */
function field_formatter_editable_menu() {
  $items = array();

  $items['ajax-callback'] = array(
    'description' => 'Ajax handler for creating and editing of node.',
    'access arguments' => array('administer nodes'),
    'page callback' => 'field_formatter_editable_callback',
    'title' => 'AJAX Handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Ajax handler for saving content.
 */
function field_formatter_editable_callback() {
  if (isset($_POST['nid']) && isset($_POST['content'])) {
    $nid = $_POST['nid'];
    $raw_data = $_POST['content'];
    $field = $_POST['field'];
    // Load node object, bypass the cache system.
    $node = node_load($nid, NULL, TRUE);
    $url_arg = (isset($_POST['arg']) ? $_POST['arg'] : '');
    // Input format.
    $format = filter_format_load('filtered_html');

    // Filter the raw data.
    $filtered_content = check_markup(
      $raw_data,
      $format->format,
      $langcode = '',
      $cache = FALSE
    );

    // Get all the fields.
    $fields = field_info_instances("node", $node->type);

    // Create new revision.
    $node->revision = 1;
    // Disable pathauto to prevent overwritting of pathalias.
    $node->path['pathauto'] = FALSE;

    // Unset unnecessary fields to reduce time in saving.
    foreach ($fields as $key => $cck_field) {
      if ($field == 'TITLE') {
        $node->title = $filtered_content;
        unset($node->$key);
      }
      // CCK fiels must used field_attach_update() API for optimize performance.
      elseif ($field == 'null' && $key == 'body') {
        if ($url_arg != 'node') {
          $node->body[$node->language][0]['summary'] = $filtered_content;
          $node->log = "Updated the node - " . filter_xss($node->title, array());
        }
        else {
          $node->body[$node->language][0]['value'] = $filtered_content;
          $node->log = "Updated the node - " . filter_xss($node->title, array());
        }

        // Unset unnecessary fields.
        if ($key != 'body') {
          unset($node->$key);
        }
      }
      else {
        // Fallback.
      }
    }
    // Validate the node.
    node_validate($node);
    // Prepares node for saving by populating author and creation date.
    node_submit($node);
    // Save node.
    node_save($node);
  }
}


/**
 * Custom Example Form.
 */
function field_formatter_editable_form($form, &$form_state) {
  $form['#prefix'] = '<div class="inline-edit-form-wrapper id="editable-form">';
  $form['#suffix'] = '</div>';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array(
      'class' => array(
        'editable-save-button'
      ),
      'disabled' => '',
      'onclick' => 'CKEDITOR.tools.callFunction(97,this);return false;',
    ),
  );
  $form['cancel'] = array(
    '#type' => 'button',
    '#value' => t('Cancel'),
    '#executes_submit_callback' => TRUE,
    '#submit' => array('field_formatter_editable_form_cancel'),
    '#attributes' => array(
      'class' => array(
        'editable-cancel-button'
      ),
    ),
  );

  return $form;
}


/**
 * Implements hook_form_alter().
 */
function field_formatter_editable_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;

  $admin_jquery_version = variable_get('jquery_update_jquery_admin_version');

  if (module_exists('jquery_update')) {
    if (empty($admin_jquery_version) || $admin_jquery_version == '1.10') {
      $ju_conf_path = $base_url . '/admin/config/development/jquery_update';
      $message = 'To avoid having problem with jQuery in your admin pages be sure to configure the jQuery version for administrative pages. See the Jquery Update !url page.';

      drupal_set_message(t($message, array('!url' => l(t('configuration'), $ju_conf_path))), 'warning');
    }
  }
}


/**
 * Callback function to reload the page.
 */
function field_formatter_editable_form_cancel() {
  drupal_goto(current_path());
}


/**
 * Implements hook_preprocess_page().
 */
function field_formatter_editable_preprocess_page(&$variables) {
  global $base_url;

  // Get menu map.
  $current_menu = menu_get_item();
  $menu_arg = $current_menu['original_map'];

  if (!path_is_admin(current_path())) {
    // Get all loaded javascript.
    $scripts = drupal_add_js();

    drupal_add_js(
      drupal_get_path('module', 'field_formatter_editable') . '/js/editable-ui.js',
      array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'every_page' => TRUE,
      )
    );
    drupal_add_css(drupal_get_path('module', 'field_formatter_editable') . '/css/editable.css');

    // Pass the User-defined Ckeditor plugins to Drupal.behaviors.
    //$data = field_formatter_editable_get_ckeditor_plugin();
    //ckeditor_get_user_plugins_to_bahaviors($data);

    // Extend edit module edit.js functionality.
    $js_files = array(
      'xeditor.js',
      'xeditor_core.js',
      'jquery.selection.js',
      'jquery.extends.js',
    );
    $js_dir = drupal_get_path('module', 'field_formatter_editable') . '/js/';
    $counter = 1;
    foreach ($js_files as $js_file) {
      drupal_add_js($js_dir . $js_file, array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'every_page' => TRUE,
        'weight' => -$counter,
      ));
      $counter++;
    }

    // Pre-load the Ckeditor for Inline editing.
    if (module_exists('libraries')) {
      $libraries = libraries_get_libraries();

      if (array_key_exists('ckeditor', $libraries)) {
        $ck_path = $libraries['ckeditor'];
        if (!in_array($ck_path . '/ckeditor.js', $scripts)) {
          drupal_add_js($ck_path . '/ckeditor.js', array(
            'scope' => 'footer',
            'group' => JS_THEME,
            'every_page' => TRUE,
            'weight' => -3,
          ));
        }
      }
    }

    // Make sure that base_url is available on xeditor.js.
    drupal_add_js(array(
      'field_formatter_editable' => array('base_path' => $base_url),
    ), 'setting');

    // Get the arg 0.
    drupal_add_js(array(
      'field_formatter_editable' => array('arg_zero' => $menu_arg[0]),
    ), 'setting');

    $variables['scripts'] = drupal_get_js();
  }
}


/**
 * Implements hook_page_alter().
 */
function field_formatter_editable_page_alter(&$page) {
  if (!path_is_admin(current_path())) {
    $form_save = drupal_get_form('field_formatter_editable_form');
    $page['content']['form-save'] = $form_save;
  }
}


/**
 * Implements hook_field_formatter_info_alter().
 */
function field_formatter_editable_field_formatter_info_alter(array &$info) {
  // Add to all formatters.
  foreach ($info as &$formatter) {
    $formatter['settings']['contenteditable'] = array();
  }
}


/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_editable_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if (!empty($summary)) {
    $summary .= '<br />';
  }

  // Add a message to signify if field is editable or not.
  if (isset($settings['contenteditable']) && $settings['contenteditable'] === 'yes') {
    $summary .= t('Field is editable.');
  }
  else {
    $summary .= t('Field is not editable.');
  }
}


/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_formatter_editable_field_formatter_settings_form_alter(&$settings_form, $context) {
  $settings['contenteditable'] = FALSE;
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $value = filter_xss($settings['contenteditable'], array());

  $settings_form['contenteditable'] = array(
    '#type' => 'select',
    '#title' => t('Set this field as Editable'),
    '#description' => t('Setting this field as editable will make it possible in CKEditor to have inline editing.'),
    // Get the value if it's already been set.
    '#default_value' => ($settings['contenteditable'] === 'yes' ? $value : 'no'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
  );
}


/**
 * Implements hook_preprocess_field().
 *
 * Adds a contenteditable attribute to the field's attributes_array
 * according to the field formatter settings.
 */
function field_formatter_editable_preprocess_field(&$variables, $hook) {
  $entity_type = $variables['element']['#entity_type'];
  $field_name  = $variables['element']['#field_name'];
  $bundle      = $variables['element']['#bundle'];
  $view_mode   = $variables['element']['#view_mode'];
  $nid         = $variables['element']['#object']->nid;

  $contenteditable = array(
    'contenteditable' => 'true',
    'data-editor-field-id' => $nid,
    'data-edit-field-type' => filter_xss($field_name, array()),
    'id' => $field_name,
  );

  // Get field formatter settings.
  $formatter_info = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $view_mode);

  // Add attitribute for whole fields.
  if ($formatter_info['contenteditable'] === 'yes') {
    $variables += array('attributes_array' => array());
    $variables['attributes_array'] = drupal_array_merge_deep($variables['attributes_array'], $contenteditable);
  }
}


/**
 * Assemble the plugins to json format and pass to Drupal.settings.
 */
function ckeditor_get_user_plugins_to_bahaviors($data) {
  $ck_settings = unserialize($data['settings']);
  $ck_plugins = $ck_settings['toolbar'];

  // Remove all spaces, commas, left square brackets, and right square brackets.
  $toolbar = preg_split("/[\s,\[\]']+/", $ck_plugins);

  // Get the length of the toolbar array.
  $length = count($toolbar);

  // Delete the first and last elements since they're empty.
  unset($toolbar[0]);
  unset($toolbar[$length-1]);

  $input_json = array();

  // Get the values of the toolbar array.
  // Set to a new array key. This key will be used by JSON parser later on.
  $input_json['plugins'] = array_values($toolbar);

  // Encode the arrays.
  $to_json =  json_encode($input_json);
  // Pass the json encoded plugins to Javascript.
  drupal_add_js(array('ck_toolbar' => array('plugins' => $to_json)), 'setting');
}


/**
 * Get the User-defined Ckeditor plugins.
 */
function field_formatter_editable_get_ckeditor_plugin($reset = FALSE) {
  static $cached_data;
  cache_clear_all('field_formatter_editable_data', 'cache', TRUE);
  if (!isset($cached_data) || $reset) {
    if (!$reset && ($cache = cache_get('field_formatter_editable_data')) && !empty($cache->data)) {
      $cached_data = unserialize($cache->data);
    }
    else {
      // Do your expensive calculations here, and populate $my_data
      // with the correct stuff..
      $cached_data = db_select('ckeditor_settings', 'cs')
           ->fields('cs', array('settings'))
           ->condition('name', 'Advanced', '=')
           ->execute()
           ->fetchAssoc();

      cache_set('field_formatter_editable_data', serialize($cached_data), 'cache');
    }
  }
  return $cached_data;
}


/**
 * Determine if node edit page.
 */
function is_node_edit_page($is_edit_page = FALSE) {
  // Get menu map.
  $current_menu = menu_get_item();
  $menu_arg = $current_menu['original_map'];
  if (isset($menu_arg[0]) == 'node' && isset($menu_arg[2]) == 'edit') {
    $is_edit_page = TRUE;
    return $path;
  }
  return $is_edit_page;
}
